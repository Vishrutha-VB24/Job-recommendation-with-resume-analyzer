/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as UploadImport } from './routes/Upload'
import { Route as JobdescriptionImport } from './routes/Jobdescription'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const UploadRoute = UploadImport.update({
  id: '/Upload',
  path: '/Upload',
  getParentRoute: () => rootRoute,
} as any)

const JobdescriptionRoute = JobdescriptionImport.update({
  id: '/Jobdescription',
  path: '/Jobdescription',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/Jobdescription': {
      id: '/Jobdescription'
      path: '/Jobdescription'
      fullPath: '/Jobdescription'
      preLoaderRoute: typeof JobdescriptionImport
      parentRoute: typeof rootRoute
    }
    '/Upload': {
      id: '/Upload'
      path: '/Upload'
      fullPath: '/Upload'
      preLoaderRoute: typeof UploadImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/Jobdescription': typeof JobdescriptionRoute
  '/Upload': typeof UploadRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/Jobdescription': typeof JobdescriptionRoute
  '/Upload': typeof UploadRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/Jobdescription': typeof JobdescriptionRoute
  '/Upload': typeof UploadRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/Jobdescription' | '/Upload' | '/login' | '/register'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/Jobdescription' | '/Upload' | '/login' | '/register'
  id: '__root__' | '/' | '/Jobdescription' | '/Upload' | '/login' | '/register'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  JobdescriptionRoute: typeof JobdescriptionRoute
  UploadRoute: typeof UploadRoute
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  JobdescriptionRoute: JobdescriptionRoute,
  UploadRoute: UploadRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/Jobdescription",
        "/Upload",
        "/login",
        "/register"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/Jobdescription": {
      "filePath": "Jobdescription.tsx"
    },
    "/Upload": {
      "filePath": "Upload.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
