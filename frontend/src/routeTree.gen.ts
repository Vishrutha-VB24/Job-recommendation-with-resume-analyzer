/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as RegisterImport } from './routes/register'
import { Route as LoginImport } from './routes/login'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as JobdescriptionImport } from './routes/Jobdescription'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated/index'
import { Route as AuthenticatedUploadImport } from './routes/_authenticated/upload'
import { Route as AuthenticatedRecommendationImport } from './routes/_authenticated/recommendation'
import { Route as AuthenticatedProfileImport } from './routes/_authenticated/profile'
import { Route as AuthenticatedJobUploadImport } from './routes/_authenticated/jobUpload'
import { Route as AuthenticatedJobIdImport } from './routes/_authenticated/job.$id'

// Create/Update Routes

const RegisterRoute = RegisterImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const JobdescriptionRoute = JobdescriptionImport.update({
  id: '/Jobdescription',
  path: '/Jobdescription',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedUploadRoute = AuthenticatedUploadImport.update({
  id: '/upload',
  path: '/upload',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedRecommendationRoute =
  AuthenticatedRecommendationImport.update({
    id: '/recommendation',
    path: '/recommendation',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

const AuthenticatedProfileRoute = AuthenticatedProfileImport.update({
  id: '/profile',
  path: '/profile',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedJobUploadRoute = AuthenticatedJobUploadImport.update({
  id: '/jobUpload',
  path: '/jobUpload',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedJobIdRoute = AuthenticatedJobIdImport.update({
  id: '/job/$id',
  path: '/job/$id',
  getParentRoute: () => AuthenticatedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/Jobdescription': {
      id: '/Jobdescription'
      path: '/Jobdescription'
      fullPath: '/Jobdescription'
      preLoaderRoute: typeof JobdescriptionImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/jobUpload': {
      id: '/_authenticated/jobUpload'
      path: '/jobUpload'
      fullPath: '/jobUpload'
      preLoaderRoute: typeof AuthenticatedJobUploadImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/profile': {
      id: '/_authenticated/profile'
      path: '/profile'
      fullPath: '/profile'
      preLoaderRoute: typeof AuthenticatedProfileImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/recommendation': {
      id: '/_authenticated/recommendation'
      path: '/recommendation'
      fullPath: '/recommendation'
      preLoaderRoute: typeof AuthenticatedRecommendationImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/upload': {
      id: '/_authenticated/upload'
      path: '/upload'
      fullPath: '/upload'
      preLoaderRoute: typeof AuthenticatedUploadImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/job/$id': {
      id: '/_authenticated/job/$id'
      path: '/job/$id'
      fullPath: '/job/$id'
      preLoaderRoute: typeof AuthenticatedJobIdImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedJobUploadRoute: typeof AuthenticatedJobUploadRoute
  AuthenticatedProfileRoute: typeof AuthenticatedProfileRoute
  AuthenticatedRecommendationRoute: typeof AuthenticatedRecommendationRoute
  AuthenticatedUploadRoute: typeof AuthenticatedUploadRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
  AuthenticatedJobIdRoute: typeof AuthenticatedJobIdRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedJobUploadRoute: AuthenticatedJobUploadRoute,
  AuthenticatedProfileRoute: AuthenticatedProfileRoute,
  AuthenticatedRecommendationRoute: AuthenticatedRecommendationRoute,
  AuthenticatedUploadRoute: AuthenticatedUploadRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
  AuthenticatedJobIdRoute: AuthenticatedJobIdRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '/Jobdescription': typeof JobdescriptionRoute
  '': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/jobUpload': typeof AuthenticatedJobUploadRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/recommendation': typeof AuthenticatedRecommendationRoute
  '/upload': typeof AuthenticatedUploadRoute
  '/': typeof AuthenticatedIndexRoute
  '/job/$id': typeof AuthenticatedJobIdRoute
}

export interface FileRoutesByTo {
  '/Jobdescription': typeof JobdescriptionRoute
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/jobUpload': typeof AuthenticatedJobUploadRoute
  '/profile': typeof AuthenticatedProfileRoute
  '/recommendation': typeof AuthenticatedRecommendationRoute
  '/upload': typeof AuthenticatedUploadRoute
  '/': typeof AuthenticatedIndexRoute
  '/job/$id': typeof AuthenticatedJobIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/Jobdescription': typeof JobdescriptionRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/register': typeof RegisterRoute
  '/_authenticated/jobUpload': typeof AuthenticatedJobUploadRoute
  '/_authenticated/profile': typeof AuthenticatedProfileRoute
  '/_authenticated/recommendation': typeof AuthenticatedRecommendationRoute
  '/_authenticated/upload': typeof AuthenticatedUploadRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
  '/_authenticated/job/$id': typeof AuthenticatedJobIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/Jobdescription'
    | ''
    | '/login'
    | '/register'
    | '/jobUpload'
    | '/profile'
    | '/recommendation'
    | '/upload'
    | '/'
    | '/job/$id'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/Jobdescription'
    | '/login'
    | '/register'
    | '/jobUpload'
    | '/profile'
    | '/recommendation'
    | '/upload'
    | '/'
    | '/job/$id'
  id:
    | '__root__'
    | '/Jobdescription'
    | '/_authenticated'
    | '/login'
    | '/register'
    | '/_authenticated/jobUpload'
    | '/_authenticated/profile'
    | '/_authenticated/recommendation'
    | '/_authenticated/upload'
    | '/_authenticated/'
    | '/_authenticated/job/$id'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  JobdescriptionRoute: typeof JobdescriptionRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  RegisterRoute: typeof RegisterRoute
}

const rootRouteChildren: RootRouteChildren = {
  JobdescriptionRoute: JobdescriptionRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/Jobdescription",
        "/_authenticated",
        "/login",
        "/register"
      ]
    },
    "/Jobdescription": {
      "filePath": "Jobdescription.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/jobUpload",
        "/_authenticated/profile",
        "/_authenticated/recommendation",
        "/_authenticated/upload",
        "/_authenticated/",
        "/_authenticated/job/$id"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/register": {
      "filePath": "register.tsx"
    },
    "/_authenticated/jobUpload": {
      "filePath": "_authenticated/jobUpload.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/profile": {
      "filePath": "_authenticated/profile.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/recommendation": {
      "filePath": "_authenticated/recommendation.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/upload": {
      "filePath": "_authenticated/upload.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/": {
      "filePath": "_authenticated/index.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/job/$id": {
      "filePath": "_authenticated/job.$id.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
